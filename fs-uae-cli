#!/usr/bin/env python3
# fs-uae-cli

import sys
import argparse
import os
import subprocess
import logging

import fsuaetools as ft


wb_files = [
  'L/aux-handler',
  'C/Mount',
  'C/Dir',
  'C/List',
  'Devs/serial.device'
]

mountlist = [
  "AUX:",
  "Handler    = L:Aux-Handler",
  "StackSize  = 1000",
  "Priority   = 5"
]

startup_sequence = [
  "C:Mount AUX:",
  "newshell aux:"
]

fsuae_cfg = [
  "amiga_model = A4000/040",
  "window_hidden = 1",
  "floppy_drive_volume = 0"
]

num_hd = 0

def add_fsuae_hd_dir(cfg, dir_path, label):
  # add hd
  global num_hd
  logging.info("hd%d=%s (%s)", num_hd, dir_path, label)
  cfg.append("hard_drive_%d = %s" % (num_hd, dir_path))
  cfg.append("hard_drive_%d_label = %s" % (num_hd, label))
  num_hd += 1


def build_fsuae_config(serial_port, fs_root):
  cfg = fsuae_cfg[:]
  logging.info("serial=%s", serial_port)
  cfg.append("serial_port = " + serial_port)
  add_fsuae_hd_dir(cfg, fs_root, "ROOT")
  return cfg


def add_vamos_volumes(cfg, vamos_cfg):
  volumes = vamos_cfg.get_volumes()
  for vol_name in volumes:
    vol_sys_path = volumes[vol_name]
    add_fsuae_hd_dir(cfg, vol_sys_path, vol_name)


def build_shell_startup(cmd, cwd):
  ss = []
  ss.append("failat 255")
  ss.append("cd " + cwd)
  # prog mode
  if len(cmd) > 0:
    ss.append(' '.join(cmd))
    ss.append('echo "$RC" >root:rc')
    ss.append("root:c/uaetool quiet kill")
    ss.append("endshell")
    logging.info("prog mode: %r", cmd)
  return ss


def clear_return_code(fs_root):
  rc_file = os.path.join(fs_root, "rc")
  if os.path.exists(rc_file):
    os.remove(rc_file)


def get_return_code(fs_root):
  rc_file = os.path.join(fs_root, "rc")
  if not os.path.exists(rc_file):
    logging.error("no return code found!")
    return 1
  with open(rc_file) as fh:
    line = fh.read()
    rc = int(line)
    logging.info("command returned: %d", rc)
    return rc


def main():
  app = ft.App('launcher script for running CLI commands with headless FS-UAE')
  my_path = os.path.dirname(os.path.realpath(__file__))

  vcfg = ft.VamosCfg()

  # setup extra args
  parser = app.get_parser()
  vcfg.add_options(parser)

  grp = parser.add_argument_group("cli")
  grp.add_argument('-w', '--work-dir', default=None,
                   help='working directory')
  grp.add_argument('-r', '--wb-root', default=None,
                   help='root directory of Workbench 3.1 installation')
  grp.add_argument('-f', '--force', default=False, action='store_true',
                   help='force recreation of work dir')
  grp.add_argument('cmd', nargs='*',
                   help='command to launch')

  app.parse_args()

  # overwrite settings
  cfg = app.get_config()
  args = app.get_args()
  cfg.set_cli_work_dir(args.work_dir)
  cfg.set_cli_wb_root(args.work_dir)
  vcfg.parse_args(args)

  # shell or prog mode?
  cmd = args.cmd
  shell_mode = len(cmd) == 0
  if shell_mode:
    cwd = os.path.realpath(os.getcwd())
  else:
    cwd = os.path.realpath(os.path.dirname(cmd[0]))
    cmd[0] = os.path.basename(cmd[0])

  app.setup()

  # function to check if fs-uae is gone
  def check_exit():
    return not app.is_running()
  # function to re-focus terminal window after fs-uae app launch
  def first_line_cb():
    if sys.platform.startswith('darwin'):
      subprocess.check_call(os.path.join(my_path, "iterm_focus"))
    return shell_mode

  # create conio
  conio = ft.ConIOPty()
  # create work dir
  wd = ft.WorkDir(cfg.get_cli_work_dir())
  # create shell
  shell = ft.Shell(conio, first_line_cb, check_exit)

  # create config
  has_vcfg = vcfg.is_valid()
  uae_cfg = build_fsuae_config(conio.ttyname(), wd.get_fs_root())
  if has_vcfg:
    add_vamos_volumes(uae_cfg, vcfg)
    vol, rem = vcfg.map_sys_path(cwd)
    if cwd is None:
      logging.error("Can't map current dir '%s' to any vamos volume!", )
    ami_cwd = vol + ":"
    logging.info("map cwd to vamos volume: %s:%s", vol, rem)
  else:
    add_fsuae_hd_dir(uae_cfg, cwd, "CWD")
    ami_cwd = "cwd:"
  wd.create_fsuae_config(uae_cfg)

  # copy some essential files
  wb_root = cfg.get_cli_wb_root()
  wd.copy_files(wb_root, wb_files)
  wd.copy_file(os.path.join(my_path, "amiga", "uaetool"), "c")
  # create some files
  wd.create_mountlist(mountlist)
  wd.create_startup_sequence(startup_sequence)
  ss = build_shell_startup(cmd, ami_cwd)
  wd.create_shell_startup(ss)

  try:
    clear_return_code(wd.get_fs_root())
    shell.start()
    app.start(cfg_file=wd.get_cfg_file_name())
    shell.run(add_final_nl=shell_mode)
    return get_return_code(wd.get_fs_root())
  finally:
    app.stop()
    shell.close()
    conio.close()


# ----- entry point -----
if __name__ == '__main__':
  sys.exit(main())
