#!/usr/bin/env python3
# fs-uae-cli

import sys
import argparse
import os
import subprocess
import logging

import fsuaetools as ft


wb_files = [
  'L/aux-handler',
  'C/Mount',
  'C/Dir',
  'C/List',
  'Devs/serial.device'
]

mountlist = [
  "AUX:",
  "Handler    = L:Aux-Handler",
  "StackSize  = 1000",
  "Priority   = 5"
]

startup = [
  "C:Mount AUX:",
  "cd cwd:"
]

fsuae_cfg = [
  "amiga_model = A4000/040",
  "window_hidden = 1",
  "floppy_drive_volume = 0"
]


def build_fsuae_config(serial_port, fs_root, cwd):
  cfg = fsuae_cfg[:]
  logging.info("serial=%s", serial_port)
  cfg.append("serial_port = " + serial_port)
  # root hd
  logging.info("hd0=%s (root)", fs_root)
  cfg.append("hard_drive_0 = " + fs_root)
  cfg.append("hard_drive_0_label = ROOT")
  # cwd hd
  logging.info("hd1=%s (cwd)", cwd)
  cfg.append("hard_drive_1 = " + cwd)
  cfg.append("hard_drive_1_label = CWD")
  return cfg


def build_startup_sequence(cmd):
  ss = startup[:]
  # shell mode
  if len(cmd) == 0:
    ss.append("newshell aux:")
    logging.info("shell mode!")
  # prog mode
  else:
    ss.append("{} <>aux: {}".format(cmd[0], " ".join(cmd[1:])))
    ss.append("uaetool kill")
    logging.info("prog mode: %r", cmd)
  return ss


def main():
  app = ft.App('launcher script for running CLI commands with headless FS-UAE')
  my_path = os.path.dirname(os.path.realpath(__file__))

  # setup extra args
  parser = app.get_parser()
  parser.add_argument('-w', '--work-dir', default=None,
                      help='working directory')
  parser.add_argument('-r', '--wb-root', default=None,
                      help='root directory of Workbench 3.1 installation')
  parser.add_argument('-f', '--force', default=False, action='store_true',
                      help='force recreation of work dir')
  parser.add_argument('cmd', nargs='*',
                      help='command to launch')
  app.parse_args()

  # overwrite settings
  cfg = app.get_config()
  args = app.get_args()
  cfg.set_cli_work_dir(args.work_dir)
  cfg.set_cli_wb_root(args.work_dir)

  # shell or prog mode?
  cmd = args.cmd
  shell_mode = len(cmd) == 0
  if shell_mode:
    cwd = os.path.realpath(os.getcwd())
  else:
    cwd = os.path.realpath(os.path.dirname(cmd[0]))

  app.setup()

  # function to check if fs-uae is gone
  def check_exit():
    return not app.is_running()
  # function to re-focus terminal window after fs-uae app launch
  def first_line_cb():
    if sys.platform.startswith('darwin'):
      subprocess.check_call(os.path.join(my_path, "iterm_focus"))

  # create conio
  conio = ft.ConIOPty()
  # create work dir
  wd = ft.WorkDir(cfg.get_cli_work_dir())
  # create shell
  shell = ft.Shell(conio, first_line_cb, check_exit)

  # create config
  uae_cfg = build_fsuae_config(conio.ttyname(), wd.get_fs_root(), cwd)
  wd.create_fsuae_config(uae_cfg)

  # copy some essential files
  wb_root = cfg.get_cli_wb_root()
  wd.copy_files(wb_root, wb_files)
  wd.copy_files(os.path.join(my_path, "amiga"), ["uaetool"])
  # create some files
  wd.create_mountlist(mountlist)
  ss = build_startup_sequence(cmd)
  wd.create_startup_sequence(ss)

  try:
    shell.start()
    app.start(cfg_file=wd.get_cfg_file_name())
    shell.run(add_final_nl=shell_mode)
  finally:
    app.stop()
    shell.close()
    conio.close()


# ----- entry point -----
if __name__ == '__main__':
  sys.exit(main())
